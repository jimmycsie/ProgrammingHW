(本次作業是要熟悉c++ 封裝，繼承，多型，模板，例外處理)
題目

在本系統中會有以下兩種角色：車子和乘客。雖然應該還有司機的角色，
但我們假設司機跟車子有一對一關係，所以就簡化為只有車子和乘客就好。
就像 Uber 也有 UberBlack 這種高檔車可以選，我們的車子也分為兩種：普通車跟高檔車。
普通車跟高檔車是完全不同的，亦即只有特定廠牌的車子才能被系統記錄為高檔車，
其他車子就都是普通車。總之一輛車被加入系統時，系統就會指定它為高檔車或普通車，
之後也不會改變。

不論是車子還是乘客，在系統中的狀態都有上線（online）和離線（offline）之分。
上線中的車子分為空車（empty）與服務中（in-service）兩種，
其中服務中包含已被指定給某個乘客、正在前往的路上，此時雖然車上沒有乘客，
但我們依然說車子在服務中的狀態，且已經跟該乘客連結了。
上線的乘客分為等待中（waiting）和服務中（in-service）兩種，
其中等待中表示已被指派但還沒上車，而被服務中則表示正在前往目的地。
這兩個狀態中此乘客都會有已經連結的車子。乘客上線叫車時若一時之間叫不到車，他會立刻離線。

乘客搭車是要付錢的，而車子的計價方式是由單趟基本價格加上依里程而計的價格。
普通車和高檔車的價格是不同的，因此普通車有兩個價格參數（基本價格 aR 和單位里程價格 bR），
高檔車也有這兩個價格參數 aL 和 bL 且各比相對應的普通車參數高。
如果乘客搭乘普通車走了 x 公里，則車資為 aR+bRx，
若搭乘高檔車則為 aL+bLx。
舉例來說，若普通車基本價格為 50 而每公里要 3 元，則搭 10 公里要付 80 元。
請注意只要是普通車，都用一樣的計價公式；只要是高檔車，也都用一樣的計價公式。

在真實世界的共乘系統中，通常乘客和車子間會做雙向評價，
也就是乘客和車子都會有某種形式的累積評分。在本題中，我們只考慮車子獲得的評分。
我們假設每一趟服務結束後，該乘客都可以給予該車子 1 至 5 分的一個整數分數，
這會被累加進車子的被評分次數與生涯累積總分。乘客當然也可以不給車子評分，
那該車子的被評分次數與生涯累積總分就不會改變。
在本題中，車子的被評分次數與生涯累積總分會影響其被平臺指派給乘客的順序，
但平均分數則不會，所以你可以不用費心計算和保存這個數值。

另一個會影響車子和乘客配對的是屬性標籤。系統中有 n 種屬性標籤，像是「愛聊天」、「喜歡棒球」、
「車上有小電視」之類的。每個車子或乘客都可以在數種喜好標籤中挑幾個貼在自己身上，
這會影響到配對的順序。當一個乘客搜尋車子時，如果周圍有數輛空車，
則和乘客有較多相同之屬性標籤的空車會較優先地被配對。

綜合以上，讓我們來說明平臺將車子指派給乘客的規則。
乘客上線叫車時，會選擇他要找高檔車還是普通車，此時平臺就只搜尋此乘客選擇的車種。
若乘客因為找不到偏好的車種而改搜尋另一種，我們想像成這個乘客是先離線再上線做搜尋。
系統中定義有指派車子的最大距離 K，乘客叫車時與乘客距離大於 K 公里的車子就不納入考慮。
若乘客周圍 K 公里內只有一輛空車，平臺就會指定這輛車給乘客，讓乘客進入等待狀態；
若沒有空車，則乘客會立刻離線（也許會再上線搜尋另一種車種）；
若有複數輛空車，則每輛空車對此乘客的適配度分數是
s=r−kc+ht−pd，

其中 r 是該車的生涯累積總分、c 是生涯總被評分次數、t 是該車與該乘客共同的標籤個數、
d 是該車與該乘客間的距離（以公里計），而 k、h 與 p 則是系統參數。
平臺將指派適配度最高的車子給這個乘客，若有多輛車的適配度都同為最高，
則指派其中距離最近者，若還有平手則指派編號最小的。
我們稱呼 k 為「理想單趟評分」，例如若 k=4，則單趟若沒得到 4 分或 5 分，
這個司機下次被指派的機會就會變小；h 被稱為標籤單位得分，亦即每個相同的標籤會使此車多加幾分；
p 則是距離權重，表現出距離拉遠 1 公里時要扣幾分。

所有上線中的車子與乘客的位置都會被平臺記錄。我們假設這個城市的每個位置都是直角座標系上的格子點，
亦即可以用兩個整數 x 和 y 表示。我們也假設這個城市一切的道路都是南北向或東西向的，
因此在 (x1,y1) 與 (x2,y2) 的乘客和車子，
他們的距離為 d=|x1−x2|+|y1−y2|。

一般而言，空車會選擇在路上移動，或者在原地等待。
我們假設每一輛空車都會處在五種移動方式的其中一種：向東移動中、向西移動中、向南移動中、
向北移動中、原地不動。如果空車在移動中，我們假設普通車總是每分鐘移動恰好一公里，
高檔車則是每分鐘恰好移動兩公里。

在本題中，我們將會給你此平臺上發生的一連串事件。
每個事件都有一個發生的時間、發生的對象、發生的地點以及事件內容。
事件有以下幾類：

1. 新乘客註冊：一個新乘客提交他的手機號碼註冊了一個新帳號，
選擇數個標籤貼在自己身上，並進入離線狀態。

2. 新車子註冊：一個新司機提交他的車牌號碼註冊了一個高檔車或普通車的新帳號，
選擇數個標籤貼在自己身上，並進入離線狀態。

3. 車子上線：一個已經註冊過的車子在某個地點上線，並進入空車狀態。

4. 空車改變移動方式：一輛空車從原本的移動方式改變成新的移動方式，
例如左轉、右轉、迴轉、停下、啟動等等。

5. 乘客上線：一個已經註冊過的乘客在某個地點上線，並發出對高檔車或普通車的叫車指示。
如果 K 公里內沒有空車，他會立刻離線，反之則平臺會指派一輛車給此乘客，
該車將開往該乘客處，使乘客的狀態進入等待中，而車子的狀態進入服務中。

6. 車子接到乘客：一個被指派給某車子的司機抵達該乘客處，使乘客的狀態進入服務中。

7. 車子載著乘客抵達目的地：車子與乘客在某個地點完成服務，
乘客進入離線狀態、車子進入空車狀態，平臺則收取此趟服務的費用。
車子一定會依照南北向和東西向的規定，走兩點間的最短距離。
乘客可能會對車子的這趟服務評分。

8. 車子離線：某輛空車決定離線。偶爾我們會遇到非空車說要離線，此時他的離線企圖不會被實現，
他的狀態也不會改變。

9. 查詢車子狀態：給定某輛車的車牌號碼，印出其狀態（離線、空車、往被配對之乘客前進中、
往目的地前進中）、位置（如果為空車狀態）、
正被配對之乘客的手機號碼（如果為服務中狀態）、生涯總被評分次數與生涯總得分，
或印出此車子不存在之錯誤訊息。

10. 查詢乘客狀態：給定某個乘客的手機號碼，印出其狀態（離線、等待中、往目的地移動中）、
正被配對之車子的車牌號碼（如果為上線狀態），
或印出此乘客不存在之錯誤訊息。

11. 查詢平臺收益：請印出平臺累積至今的總收益。

12. 系統當機：發生了意外錯誤，全體車子與乘客被強制離線，
所有進行中的未完成服務都依然被完成，但系統並不知道，也因此沒收到錢。
想當然爾，下一個能發生的事件必然是車子上線或乘客上線。

請你實做一個共乘平臺系統，讀取上述事件後，根據每個事件逐一更新系統狀態，並根據查詢事件印出相關資訊。
